{"project": "pyqasm", "project_url": "https://sdk.qbraid.com/pyqasm/", "show_commit_url": "https://github.com/qBraid/pyqasm/commit/", "hash_length": 8, "revision_to_hash": {"2": "a5e32ff0dad3552012a6ea6a63312ca8db868e64", "8": "0a431766780cfade5a01dfc8603f4a4dd01e1b2c", "20": "8e5111e1654afecfc20bb5385d0460eb9f861e94", "34": "9a9000fffa370a1378a1c97274fdfe92a615b677", "50": "9b0c198e300ebfb5ac1a0152e54276604de8cbdf", "55": "d8fc16bcca86c4d8432755aa6195616f4dc6e9ba", "95": "0fd2956c729c637df6669a7d4a83e3d6725e36b8", "99": "b6cb1b45c6fd71ce1ad53bc85a522fb85aac89e7", "115": "28c4140501580c4de8d9f7ef7a99f1c6dba308c1", "123": "776e9efda84f1ad39ce7a8931ed28c6dfc1fa523", "128": "fbb4fb685269eb039eaf1e6807e44f2dc2c62855", "141": "c27b69e4c32823dfc83fe68dd206dbce616f4709", "220": "f2f7e048e36b8ebfa6e63dd88805c2f8d1a6d689", "242": "850f7fe4e0e20a836d466ddcdf888867014eab27", "243": "da1b725bd478c5119a7e06bab79f341684de054a", "244": "3ee25f1d5f14da3b3df4826bcf008793d08f3845", "245": "d5bf684ddeee80e58dd066ed2b4f6b7a1e02c311"}, "revision_to_date": {"2": 1728066107000, "8": 1728971552000, "20": 1729512720000, "34": 1730899815000, "50": 1732781301000, "55": 1733807640000, "95": 1739533734000, "99": 1740037065000, "115": 1742315496000, "123": 1745214070000, "128": 1745559690000, "141": 1750139606000, "220": 1755151403000, "242": 1755785531000, "243": 1756185992000, "244": 1756186110000, "245": 1756186192000}, "params": {"arch": ["ARM64"], "cpu": ["Apple M3 (8 cores) @ 2.75-4.05 GHz"], "machine": ["pyqasm-benchmarking"], "num_cpu": ["8"], "os": ["macOS Sequoia 15.6"], "ram": ["16GB"], "python": ["3.13"], "branch": ["main"]}, "graph_param_list": [{"arch": "ARM64", "cpu": "Apple M3 (8 cores) @ 2.75-4.05 GHz", "machine": "pyqasm-benchmarking", "num_cpu": "8", "os": "macOS Sequoia 15.6", "ram": "16GB", "python": "3.13", "branch": "main"}], "benchmarks": {"import.PyqasmImport.time_pyqasm_import": {"code": "class PyqasmImport:\n    def time_pyqasm_import(self):\n        call((executable, \"-c\", \"import pyqasm\"))", "min_run_count": 2, "name": "import.PyqasmImport.time_pyqasm_import", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6759fce40e60952c4e82148dae0182390fe5cafa5be3b507f2bb289c12223138", "warmup_time": -1}, "openpulse.Openpulse.time_openpulse": {"code": "class Openpulse:\n    def time_openpulse(self):\n        _ = load(self.qasm_file).unroll()\n\n    def setup(self):\n        # Get benchmark file, downloading if necessary\n        self.qasm_file = get_benchmark_file(\"neutral_atom_gate.qasm\")", "min_run_count": 2, "name": "openpulse.Openpulse.time_openpulse", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "31cdbab6fb895a6defb7c3850509f905471590a3af18deac1cf4da6aed8dc668", "warmup_time": -1}, "pyqasm_functions.PyqasmFunctions.time_draw": {"code": "class PyqasmFunctions:\n    def time_draw(self, _):\n        \"\"\"Draw QASM object of specified size.\"\"\"\n        _ = printer.mpl_draw(self.pyqasm_obj, idle_wires=True, external_draw=False)\n\n    def setup(self, file_size):\n        # Extract the original file size name from the parameter value\n        if \"(224 lines)\" in file_size:\n            file_size_key = \"small\"\n        elif \"(2335 lines)\" in file_size:\n            file_size_key = \"mid\"\n        elif \"(17460 lines)\" in file_size:\n            file_size_key = \"large\"\n        else:\n            file_size_key = file_size\n    \n        # Define files for each size category\n        self.files = {\n            \"small\": \"vqe_uccsd_n4.qasm\",  # 224 lines\n            \"mid\": \"dnn_n16.qasm\",  # 2335 lines\n            \"large\": \"qv_N029_12345.qasm\",  # 17460 lines\n        }\n    \n        # Get benchmark file for the specified size\n        self.qasm_file = get_benchmark_file(self.files[file_size_key])\n        self.pyqasm_obj = load(self.qasm_file)\n    \n        # Create output file path for dump operations\n        input_path = Path(self.qasm_file)\n        self.output_file = str(input_path.parent / f\"{file_size_key}_unrolled.qasm\")", "min_run_count": 2, "name": "pyqasm_functions.PyqasmFunctions.time_draw", "number": 0, "param_names": ["qasm_file"], "params": [["'small (224 lines)'", "'mid (2335 lines)'", "'large (17460 lines)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "4062927eec81be34fcd340715125c696b208438e241c515f8470cb70d6b6a1ae", "warmup_time": -1}, "pyqasm_functions.PyqasmFunctions.time_dump": {"code": "class PyqasmFunctions:\n    def time_dump(self, _):\n        \"\"\"Dump QASM object of specified size to file.\"\"\"\n        dump(self.pyqasm_obj, self.output_file)\n\n    def setup(self, file_size):\n        # Extract the original file size name from the parameter value\n        if \"(224 lines)\" in file_size:\n            file_size_key = \"small\"\n        elif \"(2335 lines)\" in file_size:\n            file_size_key = \"mid\"\n        elif \"(17460 lines)\" in file_size:\n            file_size_key = \"large\"\n        else:\n            file_size_key = file_size\n    \n        # Define files for each size category\n        self.files = {\n            \"small\": \"vqe_uccsd_n4.qasm\",  # 224 lines\n            \"mid\": \"dnn_n16.qasm\",  # 2335 lines\n            \"large\": \"qv_N029_12345.qasm\",  # 17460 lines\n        }\n    \n        # Get benchmark file for the specified size\n        self.qasm_file = get_benchmark_file(self.files[file_size_key])\n        self.pyqasm_obj = load(self.qasm_file)\n    \n        # Create output file path for dump operations\n        input_path = Path(self.qasm_file)\n        self.output_file = str(input_path.parent / f\"{file_size_key}_unrolled.qasm\")", "min_run_count": 2, "name": "pyqasm_functions.PyqasmFunctions.time_dump", "number": 0, "param_names": ["qasm_file"], "params": [["'small (224 lines)'", "'mid (2335 lines)'", "'large (17460 lines)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "7d0aa967394dc200b54301a06e8a07e35c79f356bcc21990f6752c101872d672", "warmup_time": -1}, "pyqasm_functions.PyqasmFunctions.time_dumps": {"code": "class PyqasmFunctions:\n    def time_dumps(self, _):\n        \"\"\"Serialize QASM object of specified size to string.\"\"\"\n        _ = dumps(self.pyqasm_obj)\n\n    def setup(self, file_size):\n        # Extract the original file size name from the parameter value\n        if \"(224 lines)\" in file_size:\n            file_size_key = \"small\"\n        elif \"(2335 lines)\" in file_size:\n            file_size_key = \"mid\"\n        elif \"(17460 lines)\" in file_size:\n            file_size_key = \"large\"\n        else:\n            file_size_key = file_size\n    \n        # Define files for each size category\n        self.files = {\n            \"small\": \"vqe_uccsd_n4.qasm\",  # 224 lines\n            \"mid\": \"dnn_n16.qasm\",  # 2335 lines\n            \"large\": \"qv_N029_12345.qasm\",  # 17460 lines\n        }\n    \n        # Get benchmark file for the specified size\n        self.qasm_file = get_benchmark_file(self.files[file_size_key])\n        self.pyqasm_obj = load(self.qasm_file)\n    \n        # Create output file path for dump operations\n        input_path = Path(self.qasm_file)\n        self.output_file = str(input_path.parent / f\"{file_size_key}_unrolled.qasm\")", "min_run_count": 2, "name": "pyqasm_functions.PyqasmFunctions.time_dumps", "number": 0, "param_names": ["qasm_file"], "params": [["'small (224 lines)'", "'mid (2335 lines)'", "'large (17460 lines)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "7fe8cb67aa06ad843c08bdf5556d5213c37726445594c32ab1bdcc581a80b669", "warmup_time": -1}, "pyqasm_functions.PyqasmFunctions.time_load": {"code": "class PyqasmFunctions:\n    def time_load(self, _):\n        \"\"\"Load QASM file of specified size.\"\"\"\n        _ = load(self.qasm_file)\n\n    def setup(self, file_size):\n        # Extract the original file size name from the parameter value\n        if \"(224 lines)\" in file_size:\n            file_size_key = \"small\"\n        elif \"(2335 lines)\" in file_size:\n            file_size_key = \"mid\"\n        elif \"(17460 lines)\" in file_size:\n            file_size_key = \"large\"\n        else:\n            file_size_key = file_size\n    \n        # Define files for each size category\n        self.files = {\n            \"small\": \"vqe_uccsd_n4.qasm\",  # 224 lines\n            \"mid\": \"dnn_n16.qasm\",  # 2335 lines\n            \"large\": \"qv_N029_12345.qasm\",  # 17460 lines\n        }\n    \n        # Get benchmark file for the specified size\n        self.qasm_file = get_benchmark_file(self.files[file_size_key])\n        self.pyqasm_obj = load(self.qasm_file)\n    \n        # Create output file path for dump operations\n        input_path = Path(self.qasm_file)\n        self.output_file = str(input_path.parent / f\"{file_size_key}_unrolled.qasm\")", "min_run_count": 2, "name": "pyqasm_functions.PyqasmFunctions.time_load", "number": 0, "param_names": ["qasm_file"], "params": [["'small (224 lines)'", "'mid (2335 lines)'", "'large (17460 lines)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "f0a72066f4fe0cb517edce21f273aa9f91f49308689aaa849b2485c792fb56e3", "warmup_time": -1}, "unroll.Unrolling.time_qubit_reg_consolidation": {"code": "class Unrolling:\n    def time_qubit_reg_consolidation(self, _):\n        \"\"\"Unroll QASM file of specified size with qubit consolidation.\"\"\"\n        _ = self.pyqasm_obj.unroll(consolidate_qubits=True)\n\n    def setup(self, file_size):\n        # Extract the original file size name from the parameter value\n        if \"(224 lines)\" in file_size:\n            file_size_key = \"small\"\n        elif \"(2335 lines)\" in file_size:\n            file_size_key = \"mid\"\n        elif \"(17460 lines)\" in file_size:\n            file_size_key = \"large\"\n        else:\n            file_size_key = file_size\n    \n        # Define files for each size category\n        self.files = {\n            \"small\": \"vqe_uccsd_n4.qasm\",  # 224 lines\n            \"mid\": \"dnn_n16.qasm\",  # 2335 lines\n            \"large\": \"qv_N029_12345.qasm\",  # 17460 lines\n        }\n    \n        # Get benchmark file for the specified size\n        self.qasm_file = get_benchmark_file(self.files[file_size_key])\n        self.pyqasm_obj = load(self.qasm_file)", "min_run_count": 2, "name": "unroll.Unrolling.time_qubit_reg_consolidation", "number": 0, "param_names": ["qasm_file"], "params": [["'small (224 lines)'", "'mid (2335 lines)'", "'large (17460 lines)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "a8536923655e11af9b882bbc4c4a376c54c42a2f9c978df5988c05b6bac7ea7a", "warmup_time": -1}, "unroll.Unrolling.time_unroll": {"code": "class Unrolling:\n    def time_unroll(self, _):\n        \"\"\"Unroll QASM file of specified size.\"\"\"\n        _ = self.pyqasm_obj.unroll()\n\n    def setup(self, file_size):\n        # Extract the original file size name from the parameter value\n        if \"(224 lines)\" in file_size:\n            file_size_key = \"small\"\n        elif \"(2335 lines)\" in file_size:\n            file_size_key = \"mid\"\n        elif \"(17460 lines)\" in file_size:\n            file_size_key = \"large\"\n        else:\n            file_size_key = file_size\n    \n        # Define files for each size category\n        self.files = {\n            \"small\": \"vqe_uccsd_n4.qasm\",  # 224 lines\n            \"mid\": \"dnn_n16.qasm\",  # 2335 lines\n            \"large\": \"qv_N029_12345.qasm\",  # 17460 lines\n        }\n    \n        # Get benchmark file for the specified size\n        self.qasm_file = get_benchmark_file(self.files[file_size_key])\n        self.pyqasm_obj = load(self.qasm_file)", "min_run_count": 2, "name": "unroll.Unrolling.time_unroll", "number": 0, "param_names": ["qasm_file"], "params": [["'small (224 lines)'", "'mid (2335 lines)'", "'large (17460 lines)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "1db10100eeb370be7ef2251836a6d45734f4d864a0c824eb2e2c74f951fa7eee", "warmup_time": -1}, "validate.Validate.time_validate": {"code": "class Validate:\n    def time_validate(self, _):\n        \"\"\"Validate QASM file of specified size.\"\"\"\n        _ = self.pyqasm_obj.validate()\n\n    def setup(self, file_size):\n        # Extract the original file size name from the parameter value\n        if \"(224 lines)\" in file_size:\n            file_size_key = \"small\"\n        elif \"(2335 lines)\" in file_size:\n            file_size_key = \"mid\"\n        elif \"(17460 lines)\" in file_size:\n            file_size_key = \"large\"\n        else:\n            file_size_key = file_size\n    \n        # Define files for each size category\n        self.files = {\n            \"small\": \"vqe_uccsd_n4.qasm\",  # 224 lines\n            \"mid\": \"dnn_n16.qasm\",  # 2335 lines\n            \"large\": \"qv_N029_12345.qasm\",  # 17460 lines\n        }\n    \n        # Get benchmark file for the specified size\n        self.qasm_file = get_benchmark_file(self.files[file_size_key])\n        self.pyqasm_obj = load(self.qasm_file)", "min_run_count": 2, "name": "validate.Validate.time_validate", "number": 0, "param_names": ["qasm_file"], "params": [["'small (224 lines)'", "'mid (2335 lines)'", "'large (17460 lines)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 300, "type": "time", "unit": "seconds", "version": "5e79e1e01c6ab327088c51a8eb0edfbbc7ffb18dde3f817c348e895fe6c869eb", "warmup_time": -1}}, "machines": {"pyqasm-benchmarking": {"arch": "ARM64", "cpu": "Apple M3 (8 cores) @ 2.75-4.05 GHz", "machine": "pyqasm-benchmarking", "num_cpu": "8", "os": "macOS Sequoia 15.6", "ram": "16GB", "version": 1}}, "tags": {"v0.0.0": 2, "v0.0.1": 8, "v0.0.2": 20, "v0.0.3": 34, "v0.1.0": 55, "v0.1.0-alpha": 50, "v0.2.0": 95, "v0.2.1": 99, "v0.3.0": 115, "v0.3.1": 123, "v0.3.2": 128, "v0.4.0": 141, "v0.5.0": 220}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}